// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"go.uber.org/zap"
	"icms/internal/command"
	"icms/internal/component/facial"
	"icms/internal/component/jwt"
	"icms/internal/component/orm"
	"icms/internal/config"
	"icms/internal/repository/activity"
	"icms/internal/repository/course"
	"icms/internal/repository/enrolment"
	"icms/internal/repository/message"
	"icms/internal/repository/user"
	"icms/internal/transport/http"
	"icms/internal/transport/http/handler/v1/authentication"
	course2 "icms/internal/transport/http/handler/v1/course"
	"icms/internal/transport/http/handler/v1/face"
	"icms/internal/transport/http/handler/v1/me"
	user2 "icms/internal/transport/http/handler/v1/user"
	"icms/internal/transport/http/middleware"
	"icms/internal/transport/http/router"
)

// Injectors from wire.go:

func initApp(configConfig *config.Config, logger log.Logger, zapLogger *zap.Logger) (*kratos.App, func(), error) {
	ormConfig := configConfig.DB
	db, cleanup, err := orm.New(ormConfig, logger)
	if err != nil {
		return nil, nil, err
	}
	userRepository := user.New(db)
	jwtConfig := configConfig.Jwt
	jwtJwt, err := jwt.New(jwtConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	facialConfig := configConfig.Facial
	facialFacial, err := facial.New(facialConfig, logger, userRepository)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	authenticationHandler := authentication.NewHandler(userRepository, jwtJwt, facialFacial)
	courseRepository := course.New(db)
	enrolmentRepository := enrolment.New(db)
	messageRepository := message.New(db)
	courseHandler := course2.NewHandler(courseRepository, enrolmentRepository, messageRepository)
	faceHandler := face.NewHandler(userRepository, facialFacial)
	activityRepository := activity.New(db)
	meHandler := me.NewHandler(activityRepository, enrolmentRepository, facialFacial, messageRepository, userRepository)
	userHandler := user2.NewHandler(userRepository, facialFacial)
	activityMiddleware := middleware.NewActivityMiddleware(activityRepository)
	jwtAuthMiddleware := middleware.NewJWTMiddleware(jwtJwt, userRepository)
	v1Group := router.NewV1Group(authenticationHandler, courseHandler, faceHandler, meHandler, userHandler, activityMiddleware, jwtAuthMiddleware)
	engine := router.New(v1Group)
	server := http.NewHTTPServer(configConfig, engine)
	app := newApp(configConfig, logger, server)
	return app, func() {
		cleanup()
	}, nil
}

func initCommand(configConfig *config.Config, logger log.Logger, zapLogger *zap.Logger) (*command.AllCommands, func(), error) {
	ormConfig := configConfig.DB
	db, cleanup, err := orm.New(ormConfig, logger)
	if err != nil {
		return nil, nil, err
	}
	migrateCommand := command.NewMigrateCommand(db, logger)
	allCommands := command.New(migrateCommand)
	return allCommands, func() {
		cleanup()
	}, nil
}
